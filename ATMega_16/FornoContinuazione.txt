/*********************************************
  NOME FILE   : ___.c
  DESCRIZIONE : 
  MCU	      : Atmel ATmega16 @ 8MHz
  COMPILATORE : WinAVR-20070525 (GCC 4.1.2)
  AUTORE      : 
  VERSIONE    : 1.0
*********************************************/
#include "common.h"
#include "uart.h"
#include "timers.h"
#include "lcd.h"
#include <stdio.h>

/*********************************************
   FUNZIONE   : mcu_setup
   DESCRIZIONE: Inizializzazione periferiche MCU.
   PARAMETRI  : nessuno
   RETURN CODE: nessuno
*********************************************/
void mcu_setup(void)
{
	// Configurazione porte
	DDRA  = 0b11110000;
	PORTA = 0b00001110;				//PA0 Ã¨ analogico quindi no resistenza di pull up
	DDRB  = 0b00000000;
	PORTB = 0b11111111;
	DDRC  = 0b00000011;
	PORTC = 0b11111100;
	DDRD  = 0b11110000;
	PORTD = 0b00001111;

	// Configurazione periferiche utilizzate
	
		
		LCD_init();
		LCD_clear();
		LCD_home();
		LCD_cursor(1);
		
	
	//TCCR1A=0b10000001;
	//TCCR1B=0b00001001;
	
	ADMUX=0b01000000;
	ADCSRA=0b10000110;
	
	TCCR1A = 0b10000001; //mode=5
	TCCR1B = 0b00001001; //N=1
	
	TCCR0=0b00000011;
	OCR0=124;
	SET(TIMSK, OCIE0);

	// watchdog
	wdt_reset();                   
	wdt_disable();        //disabilita wdt

	// interrupt
	SEI();                //abilita interruzioni
}

/*********************************************
   FUNZIONE   : main
   DESCRIZIONE: Main loop
   PARAMETRI  : nessuno
   RETURN CODE: ignorato
*********************************************/
ISR(TIMER0_COMP_vect)		// interrupt ogni millisecondo
{
	update_timers();
}
int main(void)
{
	mcu_setup();
	U8 setpoint=20;
	//U8 aus = 0;
	int T=0;
	int deltat=0;
	char stringa1[20];
	char stringa2[20];
			CLR(PORTD,5);
			CLR(PORTD,7);
	while(1) 
	{
		if(!TST(PINB,7))
		{
			delayMs(100);
			setpoint+=1;
			set_timer(1,1000);

						
			while(!TST(PINB,7))
			{		
					if(timeout(2) && timeout(1))
					{
						setpoint+=5;	
						set_timer(2,250);
						sprintf(stringa1,"setpoint: %d",setpoint);
						LCD_writeln(0,stringa1);
					}		
			}
			delayMs(100);
			
		}
			
		if(!TST(PINB,6))
		{
			delayMs(100);
			setpoint+=-1;
			set_timer(1,1000);

			
			while(!TST(PINB,6))
			{
				if(timeout(2) && timeout(1))
				{
					setpoint+=-5;
					set_timer(2,250);
					sprintf(stringa1,"setpoint: %d",setpoint);
					LCD_writeln(0,stringa1);
				}

			}
			delayMs(100);
			
		}
		//separazione 
		//poi per isteresi +-1 grado
		
		SET(ADCSRA,ADSC);
		while(TST(ADCSRA,ADSC));
		T=((U32)(ADC*60)/1023)+20;
	

		if(T<=(setpoint))
		{
			deltat=(setpoint-T);
			OCR1AL=deltat*4;					
			
			//SET(PORTD,5);
			SET(PORTD,7);
		}
		if(T>(setpoint))
		{
			OCR1AL=0;
			//CLR(PORTD,5);
			CLR(PORTD,7);
		}
		
			if(timeout(3))
			{
				set_timer(3,100);
				sprintf(stringa1,"SP %d : %d",setpoint,OCR1AL);
				sprintf(stringa2,"temp: %d",T);
				LCD_writeln(0,stringa1);
				LCD_writeln(1,stringa2);
			}
	}
}

/*
Altrimenti per costanti maggiori di 4 imporre il limite al calcolo per evitare che OCR1AL si resetti a 0 */
